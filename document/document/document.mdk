Title         : ProseLang
Author        : T. Mammen Joseph

[TITLE]

# Concept

 - Things commonly known as functions will be called 'verb(s)'
 - Things commonly known as variables will be called 'noun(s)'
  - Boolean variables are 'fact(s)' 

# Definitions
## Variables
### Primitive: String

Example: \
` name is 'shakespeare'` \
` display name `

### Complicated Example

Example: `shakespeare is a writer where name is 'Shakespeare' and lifeSpan is a dateDuration where start is '26 April 1564' to date and end is '23 April 1616' to date.`

Breakdown: A new variable 'shakespeare' is declared, of type writer. The writer type takes in the mandatory parameter 'name', and the optional parameter 'lifeSpan'.
'lifeSpan' must be of type 'dateDuration', which takes the mandatory parameters 'start' and 'end', which are both strings that are typecast with the 'to' keyword to the type 'date'.

##  Functions or Verbs

Example: \
  `greet means print "Hello " then print target's name.` \
  `I greet shakespeare. // Hello Shakespeare`

Breakdown: A verb is declared which displays 'hello' and then the name property of the target. "'s " is the equivalent of -> in php or . in javascript.
Then "I" which is equivalent to 'this' uses the greet verb, targeting shakespeare.

Example continued:
  ` fitzgerald is writer where name is "F. Scott Fitzgerald". ` \
  ` I greet fitzgerald. // Hello F. Scott Fitzgerald `

Note: `greet fitzgerald` is the same as `I greet fitzgerald`. If the caller is ommitted, ProseLang will assume the author meant 'I'.

## If statements

Example: \
    ` greetTheRightPerson means ` \
    `   fitzgeraldIsAnImpostor is a fact where fitzgerald's name is equal to 'Gatsby'.` \
    `   if fitzgeraldIsAnImpostor is true` \
    `   then ` \
    `     I greet fitzgerald. ` \
    `   else ` \
    `     I greet shakespeare. ` \
    \
    ` I greetTheRightPerson // Hello Shakespeare `

Breakdown: A lot happens here, a verb is declared, which creates a 'fact' commonly known as a boolean, where we check if 
fitzgerald's name property is equal to 'Gatsby'. Then we do an if check, that runs the greet verb on fitzgerald if the fact is true, or 
runs the greet verb on shakespeare otherwise.

### Boolean operators, or 'fact(s)'

Examples: \
` imShakespeare is a fact where shakespeare's name is equal to "Shakespeare" // true (fact declarations return their value)` \
` imFitzgerald is a fact where fitzgerald's name is not equal to "F. Scott Fitzgerald" // false (fact declarations return value)` \
` shakespeare's name is equal to "Shakespeare" and fitzgeralds's name is not equal to "Gatsby" // true (AND)` \
` imShakespeare and imFitzgerald // false (AND)` \
` imShakespeare or imFitzgerald // true (OR)` \
` either imShakespeare or imFitzgerald // true (OR)` \
` either imShakespeare or imShakespeare // false (XOR)` \

# Arithmetic
## Basic
Examples: \
`numOne is 3` \
`numTwo is 4` \
`numThree is numOne plus numTwo` \
`// numThree is numOne + numTwo` \
`numFour is numTwo minus numOne` \
`// numThree is numTwo - numOne`
`print numThree // 7` \
`print numFour // 1` \
`numFive is numFour divided by numOne` \
`// numFive is numFour / numOne` \
`print numFive where form is "2.2" // 02.33` \
`print roundUp numFive where form is "1.2" // 3.00 ` \
`print roundDown numFive where form is "1.2" // 2.00 ` \
`print round numFive where form is "1.2" // 2.00 ` \

Breakdown: Most is self explanatory. At the end, the print verb, like most verbs in the english language, is both polymorphic and variadic. 
So we add the optional form property to numFive as we send it into the print command, with the string value "2.2" meaning, 2 integer digits, 2 decimal digits.
The three built in verbs, roundUp, roundDown, and round ignore the form property and adjust only the value of the number, numFive.
The print command reads the form, and outputs the value accordingly. 

## Advanced

Examples: \
``

# Classes

## Defining

Example type: \ 
` dog is a type of animal. ` \
` dog needs a string name, and a number age. ` \
` dog can have a string breed. ` \



